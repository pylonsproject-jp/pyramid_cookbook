.. The Main Function

main 関数
+++++++++++++++++

.. Both Pyramid and Pylons have a top-level function that returns a WSGI
.. application. The Pyramid function is ``main`` in *pyramidapp/\_\_init\_\_.py*.
.. The Pylons function is ``make_app`` in *pylonsapp/config/middleware.py*. Here's
.. the main function generated by Pyramid's 'starter' scaffold:

Pyramid と Pylons の両方に WSGI アプリケーションを返すトップレベルの
関数があります。 Pyramid の関数は *pyramidapp/\_\_init\_\_.py* の中の
``main`` です。Pylons の関数は *pylonsapp/config/middleware.py* の中の
``make_app`` です。以下は Pyramid の 'starter' scaffold によって生成さ
れた main 関数です:


.. literalinclude:: code/starter_main.py
   :linenos:


.. Pyramid has less boilerplate code than Pylons, so the main function subsumes
.. Pylons' middleware.py, environment.py, *and* routing.py modules.  Pyramid's
.. configuration code is just 5 lines long in the default application, while 
.. Pylons' is 35.

Pyramid は Pylons に比べると決まりきった (boilerplate) コードがより少な
くなります。そのため main 関数は Pylons の middleware.py,
environment.py, *そして* routing.py モジュールの内容を含んでいます。
Pyramid の設定コードは、デフォルトアプリケーションではたった 5 行の長さ
があります。一方 Pylons では 35 行です。


.. Most of the function's body deals with the Configurator (``config``).
.. That isn't the application object; it's a helper that will instantiate the
.. application for us. You pass in the settings as a dict to the constructor (line
.. 6), call various methods to set up routes and such, and finally call
.. ``config.make_wsgi_app()`` to get the application, which the main function
.. returns. The application is an instance of ``pyramid.router.Router``. (A Pylons
.. application is an instance of a ``PylonsApp`` subclass.)

関数本体のほとんどは Configurator (``config``) を扱います。 Configurator は
アプリケーションオブジェクトではありません; アプリケーションをインスタンス
化するためのヘルパーです。コンストラクタ (6行目) に設定を辞書として渡し、
route などをセットアップするために様々なメソッドを呼び出し、アプリケーション
を得るために最後に ``config.make_wsgi_app()`` を呼び出します。main 関数
はそれを返します。そのアプリケーションは ``pyramid.router.Router`` の
インスタンスです (Pylons アプリケーションは PylonsApp のサブクラスの
インスタンスです)。


.. Dotted Python names and asset specifications

dotted Python name と asset specification
============================================

.. Several config methods accept either an object (e.g., a module or callable) or
.. a string naming the object. The latter is called a *dotted Python name*. It's a
.. dot-delimited string specifying the absolute name of a module or a top-level
.. object in a module: "module", "package.module",
.. "package.subpackage.module.attribute".  Passing string names allows you to
.. avoid importing the object merely to pass it to a method. 

いくつかの config メソッドは、オブジェクト (例えばモジュールや
callable) またはオブジェクトを指定する文字列のいずれかを受け付けします。
後者は *dotted Python name* と呼ばれます。それはモジュールの絶対名または
モジュール中のトップレベルのオブジェクトを指定するドットで区切られた
文字列です: *module*, *package.module*,
*package.subpackage.module.attribute* 。文字列名を渡すことで、メソッド
に渡すためだけにオブジェクトをインポートしないで済むようになります。


.. If the string starts with a leading dot, it's relative to some parent package.
.. So in this ``main`` function defined in *mypyramiapp/\_\_init\_\_.py*, the
.. parent package is ``mypyramidapp``.  So the name ".views" refers to
.. *mypyramidapp/views.py*. (Note: in some cases it can sometimes be tricky to
.. guess what Pyramid thinks the parent package is.)

文字列がドットで始まる場合、それはある親パッケージに対して相対的になります。
したがって、 *mypyramiapp/\_\_init\_\_.py* に定義されたこの ``main``
関数では、親パッケージは ``mypyramidapp`` です。したがって、
名前 ".views" は *mypyramidapp/views.py* を指します (注: 場合によっては、
Pyramid が親パッケージを何と考えるかを推測することは tricky です)。


.. Closely associated with this is a *static asset specification*, which names a
.. non-Python file or directory inside a Python package. A colon
.. separates the package name from the non-Python subpath:
.. "myapp:templates/mytemplate.pt", "myapp:static", "myapp:assets/subdir1". 
.. If you leave off the first part and the colon (e.g., "templates/mytemplate.pt",
.. it's relative to some current package.

これに密接に関係しているのが *static asset specification* です。それは、
Python パッケージ内部の非 Python ファイルまたはディレクトリに名前を付けます。
コロンは非 Python サブパスとパッケージ名を分離します:
"myapp:templates/mytemplate.pt", "myapp:static",
"myapp:assets/subdir1" 。最初の部分とコロンを取り除いた場合 (例えば
"templates/mytemplate.pt") それは現在のパッケージからの相対になります。


.. An alternative syntax exists, with a colon between a module and an attribute:
.. "package.module:attribute". This usage is discouraged; it exists for
.. compatibility with Setuptools' resource syntax.

モジュールと属性の間にコロンを使う別の構文が存在します:
"package.module:attribute" 。この使用法は推奨されません; それは
Setuptools のリソース構文との互換性のために存在します。


.. Configurator methods

Configurator メソッド
=====================

.. The Configurator has several methods to customize the application. Below are
.. the ones most commonly used in Pylons-like applications, in order by how
.. widely they're used.  The full list of methods is in Pyramid's `Configurator
.. API`_.

Configurator はアプリケーションをカスタマイズするためのメソッドを複数持っ
ています。下記は、Pylons 風のアプリケーションで最も一般的に使用されるもの
を、どれくらい広く使用されるかによって順番に示したものです。メソッドの
完全なリストは Pyramid の `Configurator API`_ にあります。


.. method:: add_route(...)

   .. Register a route for URL dispatch.

   URL ディスパッチのための route を登録します。


.. method:: add_view(...)

   .. Register a view.  Views are equivalent to Pylons' controller actions.

   ビューを登録します。ビューは Pylons のコントローラアクションと同等です。


.. method:: scan(...)

   .. A wrapper for registering views and certain other things. Discussed in the
   .. views chapter.

   ビューとそれ以外のいくつかを登録するためのラッパー。ビューの章で議論
   されています。


.. method:: add_static_view(...)

   .. Add a special view that publishes a directory of static files. This is
   .. somewhat akin to Pylons' public directory, but see the static fiels chapter
   .. for caveats.

   静的ファイルのディレクトリを公開する特殊なビューを追加します。これは
   Pylons の public ディレクトリと多少類似しています。しかし警告のために
   静的ファイルの章を見てください。


.. method:: include(callable, route_prefix=None)

   .. Allow a function to customize the configuration further.  This is a
   .. wide-open interface which has become very popular in Pyramid. It has three
   .. main use cases: 

   関数が設定をさらにカスタマイズすることを可能にします。これは
   Pyramid において非常に一般的になった wide-open インタフェースです。
   それには 3 つの主なユースケースがあります:

   
   .. * To group related code together; e.g., to define your routes in a
   ..   separate module. 

   * 関連するコードをグループ化する; 例えば独立したモジュールで route
     を定義すること。


   .. * To initialize a third-party add-on. Many add-ons provide an include
   ..   function that performs all the initialization steps for you.

   * サードパーティアドオンの初期化。多くのアドオンが、初期化ステップを
     すべて行なう include 関数を提供しています。


   .. * To mount a subapplication at a URL prefix. A subapplication is just any
   ..   bundle of routes, views and templates that work together. You can use this
   ..   to split your application into logical units. Or you can write generic
   ..   subapplications that can be used in several applications, or mount a
   ..   third-party subapplication.

   * URL プレフィックスでサブアプリケーションをマウントする。サブ
     アプリケーションは、協調して動作する route 、ビュー、テンプレートを
     単にまとめたものです。アプリケーションを論理的な単位に分割するため
     にこれを使用することができます。あるいは、いくつかのアプリケーション
     の中で使用することができる汎用的なサブアプリケーションを書いたり、
     サードパーティのサブアプリケーションをマウントすることができます。


   .. If the add-on or subapplication has options, it will typically read them
   .. from the settings, looking for settings with a certain prefix and
   .. converting strings to their proper type. For instance, a session manager may
   .. look for keys starting with "session." or "thesessionmanager." as in
   .. "session.type". Consult the add-on's documentation to see what prefix it
   .. uses and which options it recognizes.

   アドオンまたはサブアプリケーションがオプションを持っている場合、典型
   的にはあるプレフィックスの付いた設定を探し、文字列を適切な型に変換す
   ることによってそれらのオプションは設定から読まれるでしょう。例えば、
   セッションマネージャは "session." あるいは "thesessionmanager."
   "session.type" のような文字列で始まるキーを探すことがあり得ます。
   アドオンがどのようなプレフィックスを使用するか、そしてどのような
   オプションを認識するかを確認するために、アドオンのドキュメンテーション
   を調べてください。


   .. The ``callable`` argument should be a function, a module, or a dotted Python
   .. name. If it resolves to a module, the module should contain an ``includeme``
   .. function which will be called. The following are equivalent:

   ``callable`` 引数は、関数、モジュール、または dotted Python name です。
   モジュールの場合、モジュールは呼び出される ``includeme`` 関数を含んで
   いなければなりません。下記は等価です:


   ::

      config.include("pyramid_beaker")
      
      import pyramid_beaker
      config.include(pyramid_beaker)
      
      import pyramid_beaker
      config.include(pyramid_beaker.includeme)


   .. If ``route_prefix`` is specified, it should be a string that will be
   .. prepended to any URLs generated by the subconfigurator's ``add_route``
   .. method. Caution: the route *names* must be unique across the main
   .. application and all subapplications, and ``route_prefix`` does not touch the
   .. names. So you'll want to name your routes "subapp1.route1" or
   .. "subapp1_route1" or such.

   ``route_prefix`` が指定された場合、それはサブコンフィギュレータの
   ``add_route`` メソッドによって生成される任意の URL に前置される文字列
   になります。注意: ルート名はメインアプリケーションとすべてのサブ
   アプリケーションを横断してユニークでなければなりません。また、
   ``route_prefix`` は名前については関与しません。したがって、ルートに
   "subapp1.route1" あるいは "subapp1_route1" のようなものを指定
   すると良いでしょう。

        
.. method:: add_subscriber(subscriber, iface=None)

   .. Insert a callback into Pyramid's event loop to customize how it processes
   .. requests. The Renderers chapter has an example of its use.

   Pyramid のイベントループに、リクエストの処理方法をカスタマイズする
   ためにコールバックを挿入します。 Renderers 章にはその使用例があります。


.. method:: add_renderer(name, factory)

   .. Add a custom renderer. An example is in the Renderers chapter.

   カスタムレンダラーを追加します。 Renderers 章に例があります。


.. method:: set_authentication_policy, set_authorization_policy, set_default_permission

   .. Configure Pyramid's built-in authorization mechanism.

   Pyramid の組み込みの認可メカニズムを設定します。


.. Other methods sometimes used: ``add_notfound_view``, ``add_exception_view``,
.. ``set_request_factory``, ``add_tween``, ``override_asset`` (used in theming).
.. Add-ons can define additional config methods by calling ``config.add_directive``.

その他の時々使われるメソッド: ``add_notfound_view``,
``add_exception_view``, ``set_request_factory``, ``add_tween``,
``override_asset`` (テーマのために使用) 。アドオンは
``config.add_directive`` を呼ぶことにより追加の config メソッドを定義す
ることができます。


.. Route arguments

route 引数
===============

.. ``config.add_route`` accepts a large number of keyword
.. arguments. They are logically divided into *predicate argumets* and
.. *non-predicate arguments*.  Predicate arguments determine whether the route matches the
.. current request. All predicates must succeed in order for the route to be
.. chosen.  Non-predicate arguments do not affect whether the route matches.

``config.add_route`` は多くのキーワード引数を受け付けます。それらは論理的に
*述語引数* と *非述語引数* に分類されます。述語引数は、 route が現在の
リクエストとマッチするかどうかを判断します。 route が選ばれるためにはすべて
の述語が成功しなければなりません。非述語引数は route マッチには影響しません。


name

    .. .[Non-predicate] The first positional arg; required. This must be a unique
    .. name for the route. The name is used to identify the route when registering
    .. views or generating URLs.

    [非述語引数] 最初の位置引数; 必須です。これは route のユニークな
    名前でなければなりません。 name はビューを登録する場合、あるいは URL
    を生成する場合に route を識別するために使用されます。


pattern

    .. .[Predicate] The second positional arg; required. This is the URL path with
    .. optional "{variable}" placeholders; e.g., "/articles/{id}" or
    .. "/abc/{filename}.html". The leading slash is optional. By default the
    .. placeholder matches all characters up to a slash, but you can specify a
    .. regex to make it match less (e.g., "{variable:\d+}" for a numeric variable)
    .. or more ("{variable:.*}" to match the entire rest of the URL including
    .. slashes). The substrings matched by the placeholders will be available as
    .. *request.matchdict* in the view.

    [述語引数] 第2の位置引数; 必須です。これは任意の "{variable}"
    プレースホルダを含む URL パスです。例えば "/articles/{id}" や
    "/abc/{filename}.html" などです。先頭のスラッシュはオプションです。
    プレースホルダはデフォルトでスラッシュまでのすべての文字とマッチします。
    しかし、正規表現を指定することで、それより短く (例えば数値変数に対
    して "{variable:\\d+}") あるいはそれより長く (スラッシュを含めて
    URL の残り全体とマッチする "{variable:.*}") マッチさせることが
    できます。プレースホルダによってマッチした部分文字列は、ビューの中では
    *request.matchdict* として利用可能になります。


    .. A wildcard syntax "\*varname" matches the rest of the URL and puts it into
    .. the matchdict as a tuple of segments instead of a single string.  So a
    .. pattern "/foo/{action}/\*fizzle" would match a URL "/foo/edit/a/1" and
    .. produce a matchdict ``{'action': u'edit', 'fizzle': (u'a', u'1')}``.

    ワイルドカード構文 "\*varname" は URL の残りとマッチし、単一の文字列
    の代わりにセグメントのタプルとして matchdict にそれを格納します。
    つまり、パターン "/foo/{action}/\*fizzle" は URL "/foo/edit/a/1"
    とマッチし、 matchdict ``{'action': u'edit', 'fizzle': (u'a', u'1')}``
    を生成します。


    .. Two special wildcards exist, "\*traverse" and "\*subpath". These are used
    .. in advanced cases to do traversal on the remainder of the URL.

    2つの特別なワイルドカード "\*traverse" と "\*subpath" が存在します。
    これらは URL の残りに対してトラバーサルを行う高度な場合に使用されます。


    .. XXX Should use raw string syntax for regexes with backslashes (\d) ?

    XXX バックスラッシュを含む正規表現 (\\d) に raw 文字列構文を使用するべき?


request_method

    .. .[Predicate] An HTTP method: "GET", "POST", "HEAD", "DELETE", "PUT". Only
    .. requests of this type will match the route. 

    [述語引数] HTTP メソッド: "GET", "POST", "HEAD", "DELETE", "PUT" 。
    このタイプのリクエストだけが route とマッチするでしょう。


request_param

    .. .[Predicate] If the value doesn't contain "=" (e.g., "q"), the request must
    .. have the specified parameter (a GET or POST variable). If it does contain
    .. "=" (e.g., "name=value"), the parameter must also have the specified value.

    [述語引数] 値が "=" を含んでいない場合 (例えば "q")、リクエストには
    指定されたパラメータ (GET または POST 変数) が存在しなければなりません。
    値が "=" を含んでいる場合 (例えば "name=value")、パラメータはさらに
    指定された値を持っていなければなりません。


    .. This is especially useful when tunnelling other HTTP methods via
    .. POST. Web browsers can't submit a PUT or DELETE method via a form, so it's
    .. customary to use POST and to set a parameter ``_method="PUT"``. The
    .. framework or application sees the "_method" parameter and pretends the
    .. other HTTP method was requested. In Pyramid you can do this with
    .. ``request_param="_method=PUT``.

    POST によって他の HTTP メソッドにトンネルする場合、これは特に有用です。
    ウェブブラウザはフォームから PUT や DELETE メソッドを送信することが
    できません。そのため、 POST を使用して、パラメータ ``_method="PUT"``
    をセットすることは慣習的です。フレームワークまたはアプリケーションは、
    "_method" パラメータを見て別の HTTP メソッドがリクエストされたように
    装います。Pyramid では ``request_param="_method=PUT`` でこれをする
    ことができます。


xhr

    .. .[Predicate] True if the request must have an "X-Requested-With" header. Some
    .. Javascript libraries (JQuery, Prototype, etc) set this header in AJAX
    .. requests to distinguish them from user-initiated browser requests.

    [述語引数] リクエストに "X-Requested-With" ヘッダーがなければならない
    場合 True にします。いくつかの Javascript ライブラリ (JQuery や
    Prototype など) は、 AJAX リクエストとユーザーが起動したブラウザ
    リクエストを区別するために、AJAX リクエストの中でこのヘッダーをセット
    します。


custom_predicates

    .. .[Predicate] A sequence of callables which will be called to determine
    .. whether the route matches the request. Use this feature if none of the
    .. other predicate arguments do what you need. The request will match the route
    .. only if *all* callables return ``True``.  Each callable will receive two
    .. arguments, ``info`` and ``request``. ``request`` is the current request.
    .. ``info`` is a dict containing the following:

    [述語引数] route がリクエストとマッチするかどうかを判断するために
    呼ばれる callable のシーケンス。他の述語引数では必要とすることが
    行えない場合はこの機能を使用してください。 callable がすべて True を
    返す場合のみ、そのリクエストは route とマッチします。個々の
    callable は 2 つの引数 ``info`` および ``request`` を受け取ります。
    ``request`` は現在のリクエストです。 ``info`` は下記を含んでいる
    辞書です:


    .. ::
    
    ..     info["match"]  =>  the match dict for the current route
    ..     info["route"].name  =>  the name of the current route
    ..     info["route"].pattern  =>  the URL pattern of the current route

    ::
    
        info["match"]  =>  現在の route 用のマッチ辞書
        info["route"].name  =>  現在の route の名前
        info["route"].pattern  =>  現在の route の URL パターン


    .. You can modify the match dict to affect how the view will see it. For
    .. instance, you can look up a model object based on its ID and put the object
    .. in the match dict under another key. If the record is not found in the
    .. model, you can return False.

    マッチ辞書を修正して、ビューがどのようにそれを見るかに影響を与える
    ことができます。例えば、ID に基づいてモデルオブジェクトを検索して、
    オブジェクトを異なるキーの下にマッチ辞書に入れることができます。
    レコードがモデルの中に見つからない場合、 False を返すことができます。


.. Other arguments available: accept, factory, header, path_info, traverse.

利用可能な他の引数: accept, factory, header, path_info, traverse 。


.. _Configurator API: http://docs.pylonsproject.org/projects/pyramid/en/latest/api/config.html


.. include:: ../links.rst
